package seed.store;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;

import seed.utils.Utils;

public class PersistKVStoreTest
{
    static Logger log;
    static PersistKVStore store;
    static int ksize = 5;
    static int vsize = 3;
    static int fsize = 1000;
    static Random R = new Random();
    static
    {
        PropertyConfigurator.configure("conf/log4j.properties");
        log = Logger.getLogger("tester");
        //
        new File("d:/t.idx").delete();
        new File("d:/t.dat").delete();
        try
        {
            store = new PersistKVStore("d:/", "t", ksize, vsize, fsize);
        }
        catch (IOException e)
        {
            e.printStackTrace();
            System.out.println("static_init");
        }
    }

    public static void main(String[] args)
    {

        singleTest();
        collisionTest();
        multiTest();
    	
    	store.print();
    }

    private static void testGet(byte[] k, byte[] v)
    {
        byte[] newV = store.get(k);
        if (Utils.isEquals(v, newV) == false)
        {
            System.out.println("k=" + Utils.join(k, ",") + "|v=" + Utils.join(v, ",") + "|newv=" + Utils.join(newV, ","));
            log.error("k=" + Utils.join(k, ",") + "|v=" + Utils.join(v, ",") + "|newv=" + Utils.join(newV, ","));
        }
    }

    // -- 单项测试
    static void singleTest(){
        byte[] k = new byte[] { 18, 113, 101, 57 };
        byte[] v = new byte[] { 103, -60, 53, };
        store.put(k, v);
        testGet(k, v);
    }

    // -- 碰撞测试, 将hash方法改为碰撞
    static void collisionTest(){

        // 18,113,101,57,|v=103,-60,53,|
//        byte[] k = new byte[] { 0,-77,-82,-32,33,10,27,-63,20,-48,-56,-86,-42,-97,-19,-81,73,52,103,53,93,45,-123,-84,6,-74,27,-78,9,-101,-69,-75,-61,7,114,-34,-106,127,-63,52,-18,52,-63,67,-75,91,70,113,98,-18,-124,-96,-79,-30,-24,84,-80,121,102,-95,-68,-11,22,-69,-57,-69,-117,-7,-40,-45,24,46,-64,30,-103,-14,127,-42,66,104,-42,-53,126,67,122,115,-42,70,-43,45,-43,22,-128,54,-38,-7,-123,-67,-78,-101,-107,-119,75,-67,-36,8,5,-62,72,-127,-103,3,-9,-122,-24,125,55,10,-103,-103,47,110,98,78,-118,-41,110,-86,-56,54,66,-57,65,-34,46,7,6,12,-25,17,-121,15,-45,-80,-86,-10,-79,2,110,-12,-48,84,45,87,110,21,-76,-41,7,-35,48,35,-66,-21,-109,-34,-19,-98,-9,-104,-111,95,-101,-33,66,2,-23,-116,-50,-122,39,127,107,-25,114,104,98,104,-2,42,-24,-93,-79,54,-28,-28,6,-117,82,-51,-37,2,-73,-4,65,-13,115,119,66,37,-34,20,113,-29,9,-50,84,55,-1,-54,9,-69,-42,8,17,20,-125,43,89,12,95,-11,-45,-39,-49,-17,31,120,12,108,87,35,-79,6,-36,66,-87,-95,93,-15,-67,56,-102,-9,-31,79,109,-45,-111,44,15,-8,40,-54,116,21,2,8, };
//        byte[] v = new byte[] { -59,-37,78,67,-15,107,32,86,-19,-19,-35,-73,-22,104,-46,22,93,16,97,-36,-90,-21,123,47,-50,21,-124,120,-7,85,-18,-34,-7,25,-15,-45,77,-62,-3,16,63,-93,-115,22,46,88,-7,-90,19,7,-102,84,1,115,95,31,-118,-71,-103,-83,54,-65,48,24,-60,-86,51,-4,113,-1,-10,97,4,121,-70,-50,121,-102,-21,83,-82,28,58,-108,-9,51,-33,-31,-110,91,103,115,71,-75,-102,-27,28,-45,82,-80,-24,32,80,15,109,85,-102,82,80,-94,79,88,103,-69,6,-44,45,85,-11,55,41,-66,-105,20,89,-118,-28,37,-101,-12,90,-80,18,-82,-44,63,-14,69,93,-37,45,-78,69,-111,89,16,104,56,93,-48,49,-44,25,123,-76,66,-47,-21,-8,-33,-2,-3,-87,67,-94,-98,7,82,-50,-93,-87,-113,-6,102,14,16,4,4,-63,35,-43,64,114,-119,47,-16,-17,123,-61,-108,105,10,-88,107,-2,-117,33,-111,-7,41,-127,72,-56,90,-102,18,8,-43,-51,-62,-99,-31,-9,1,85,-46,-68,59,-112,66,123,-48,-41,8,32,-40,53,30,105,81,63,-90,76,-46,114,52,97,-26,12,-38,123,-43,-6,-40,-73,-99,-127,-81,22,73,13,-77,-8,-52,-6,27,-114,28,29,113,42,-81,-62,-63,-72,-8,117,-27,-106,-19,123,-119,-68,-55,38,58,32,-117,32,-60,21,-19,51,-42,108,-67,45,44,66,1,-12,-100,104,-92,103,37,16,-15,-103,-23,-8,-41,118,94,-98,106,0,107,-49,60,28,105,-106,18,-32,-92,-66,-52,-81,-87,46,126,-122,-40,-6,-53,-65,-111,-30,-30,-126,-21,54,-108,30,-78,22,-119,-109,74,118,127,5,41,-5,-10,31,19,7,-32,-1,-72,103,-117,-3,26,13,40,70,-106,-127,108,123,123,118,-70,-40,-88,124,84,86,-61,91,40,-75,-73,-86,118,-46,-96,24,41,-2,-124,-89,-127,-55,75,-96,56,-35,-128,-122,55,91,14,-49,-58,-25,-55,13,67,-119,9,-42,19,5,2,-118,105,18,-34,-13,-120,-67,91,-50,10,72,116,6,98,-119,77,75,-99,-5,5,-50,35,-32,10,104,-118,123,81,-41,115,58,99,-119,15,1,10,78,-62,46,46,92,-94,7,121,103,-93,-95,-93,111,91,-20,-128,-11,4,-60,-1,18,40,-74,-65,93,110,-5,102,24,-115,-63,114,20,124,15,38,-7,-91,-54,-6,62,-99,-16,-102,85,88,90,-13,55,17,-48,111,-14,121,79,-45,0,12,-22,-65,-83,119,-73,-123,-29,19,-57,72,-18,-11,-85,33,-36,-25,127,24,-92,119,90,23,126,-35,66,-58,-43,102,-23,-112,104,118,62,68,64,114,90,-113,-114,64,27,-119,-87,37,7,63,-28,-71,7,16,-56,126,10,-105,38,55,-87,-75,-21,22,28,67,-45,-122,-6,-46,-50,-39,48,2,-100,-124,-26,60,61,60,6,101,-51,-34,60,-36,112,9,58,-17,127,62,121,-21,72,60,79,-69,-109,-92,-112,-3,-39,-127,-61,-68,-57,112,58,-89,-33,4,-9,76,99,-3,118,45,14,-114,-115,109,78,81,6,-31,100,-21,67,-100,-114,-13,23,51,-25,-128,-100,46,127,-74,-105,42,106,-17,-55,39,71,46,105,-61,90,114,77,-39,76,-59,23,-82,-100,3,-47,93,-68,-46,103,-13,-1,12,-93,108,101,10,38,-62,-36,-128,92,62,106,-30,-26,67,-49,47,83,74,-90,114,-84,64,-82,39,-108,103,-83,-86,-76,65,47,104,102,61,-48,-42,21,-108,-41,83,113,-103,-106,25,-17,5,45,-120,-58,-19,123,14,-75,-124,65,70,-103,-42,0,12,-120,39,8,-35,41,-26,75,-66,-107,-54,33,-87,119,67,-27,-24,119,-107,-11,-55,-100,-4,98,85,-49,-43,91,-78,58,64,-19,29,46,-102,32,-53,-61,9,21,-18,5,100,36,-120,-124,24,72,81,-76,9,-16,36,12,-12,-31,5,76,-116,-23,-53,-69,10,-68,92,-14,125,-113,-61,-95,58,-97,64,83,86,111,111,31,-125,1,102,-50,4,-87,14,101,52,-9,-86,9,-106,58,56,96,-62,76,-88,-59,-45,114,-75,-125,-7,18,48,-92,52,51,-107,-60,-10,41,-61,79,89,-18,-74,3,-121,-109,54,-18,-46,-124,-86,1,40,-115,-94,39,87,108,42,-64, };

//        byte[] k = new byte[] { 18, 113, 101, 57 };
//        byte[] v = new byte[] { 103, -60, 53, };
//        byte[] k2 = new byte[] { -59,-53,59,-63,-82,78,-121,-43,124,13,-9, };
//        byte[] v2 = new byte[] { 51,-12,-21,86,-52,-98,75,-95,87, };
//        store.put(k, v);
//        store.put(k2, v2);
////
//       //v=-59,-37,78,67,-15,107,32,86,-19,-19,-35,-73,-22,104,-46,22,93,16,97,-36,-90,-21,123,47,-50,21,-124,120,-7,85,-18,-34,-7,25,-15,-45,77,-62,-3,16,63,-93,-115,22,46,88,-7,-90,19,7,-102,84,1,115,95,31,-118,-71,-103,-83,54,-65,48,24,-60,-86,51,-4,113,-1,-10,97,4,121,-70,-50,121,-102,-21,83,-82,28,58,-108,-9,51,-33,-31,-110,91,103,115,71,-75,-102,-27,28,-45,82,-80,-24,32,80,15,109,85,-102,82,80,-94,79,88,103,-69,6,-44,45,85,-11,55,41,-66,-105,20,89,-118,-28,37,-101,-12,90,-80,18,-82,-44,63,-14,69,93,-37,45,-78,69,-111,89,16,104,56,93,-48,49,-44,25,123,-76,66,-47,-21,-8,-33,-2,-3,-87,67,-94,-98,7,82,-50,-93,-87,-113,-6,102,14,16,4,4,-63,35,-43,64,114,-119,47,-16,-17,123,-61,-108,105,10,-88,107,-2,-117,33,-111,-7,41,-127,72,-56,90,-102,18,8,-43,-51,-62,-99,-31,-9,1,85,-46,-68,59,-112,66,123,-48,-41,8,32,-40,53,30,105,81,63,-90,76,-46,114,52,97,-26,12,-38,123,-43,-6,-40,-73,-99,-127,-81,22,73,13,-77,-8,-52,-6,27,-114,28,29,113,42,-81,-62,-63,-72,-8,117,-27,-106,-19,123,-119,-68,-55,38,58,32,-117,32,-60,21,-19,51,-42,108,-67,45,44,66,1,-12,-100,104,-92,103,37,16,-15,-103,-23,-8,-41,118,94,-98,106,0,107,-49,60,28,105,-106,18,-32,-92,-66,-52,-81,-87,46,126,-122,-40,-6,-53,-65,-111,-30,-30,-126,-21,54,-108,30,-78,22,-119,-109,74,118,127,5,41,-5,-10,31,19,7,-32,-1,-72,103,-117,-3,26,13,40,70,-106,-127,108,123,123,118,-70,-40,-88,124,84,86,-61,91,40,-75,-73,-86,118,-46,-96,24,41,-2,-124,-89,-127,-55,75,-96,56,-35,-128,-122,55,91,14,-49,-58,-25,-55,13,67,-119,9,-42,19,5,2,-118,105,18,-34,-13,-120,-67,91,-50,10,72,116,6,98,-119,77,75,-99,-5,5,-50,35,-32,10,104,-118,123,81,-41,115,58,99,-119,15,1,10,78,-62,46,46,92,-94,7,121,103,-93,-95,-93,111,91,-20,-128,-11,4,-60,-1,18,40,-74,-65,93,110,-5,102,24,-115,-63,114,20,124,15,38,-7,-91,-54,-6,62,-99,-16,-102,85,88,90,-13,55,17,-48,111,-14,121,79,-45,0,12,-22,-65,-83,119,-73,-123,-29,19,-57,72,-18,-11,-85,33,-36,-25,127,24,-92,119,90,23,126,-35,66,-58,-43,102,-23,-112,104,118,62,68,64,114,90,-113,-114,64,27,-119,-87,37,7,63,-28,-71,7,16,-56,126,10,-105,38,55,-87,-75,-21,22,28,67,-45,-122,-6,-46,-50,-39,48,2,-100,-124,-26,60,61,60,6,101,-51,-34,60,-36,112,9,58,-17,127,62,121,-21,72,60,79,-69,-109,-92,-112,-3,-39,-127,-61,-68,-57,112,58,-89,-33,4,-9,76,99,-3,118,45,14,-114,-115,109,78,81,6,-31,100,-21,67,-100,-114,-13,23,51,-25,-128,-100,46,127,-74,-105,42,106,-17,-55,39,71,46,105,-61,90,114,77,-39,76,-59,23,-82,-100,3,-47,93,-68,-46,103,-13,-1,12,-93,108,101,10,38,-62,-36,-128,92,62,106,-30,-26,67,-49,47,83,74,-90,114,-84,64,-82,39,-108,103,-83,-86,-76,65,47,104,102,61,-48,-42,21,-108,-41,83,113,-103,-106,25,-17,5,45,-120,-58,-19,123,14,-75,-124,65,70,-103,-42,0,12,-120,39,8,-35,41,-26,75,-66,-107,-54,33,-87,119,67,-27,-24,119,-107,-11,-55,-100,-4,98,85,-49,-43,91,-78,58,64,-19,29,46,-102,32,-53,-61,9,21,-18,5,100,36,-120,-124,24,72,81,-76,9,-16,36,12,-12,-31,5,76,-116,-23,-53,-69,10,-68,92,-14,125,-113,-61,-95,58,-97,64,83,86,111,111,31,-125,1,102,-50,4,-87,14,101,52,-9,-86,9,-106,58,56,96,-62,76,-88,-59,-45,114,-75,-125,-7,18,48,-92,52,51,-107,-60,-10,41,-61,79,89,-18,-74,3,-121,-109,54,-18,-46,-124,-86,1,40,-115,-94,39,87,108,42,-64,
//        //
//        testGet(k, v);
//        testGet(k2, v2);
    }

    // -- 多数据量测试(碰撞/与正常)
    static Map<byte[], byte[]> map = new HashMap<byte[], byte[]>();
    static void multiTest()
    {
        for (int i = 0; i < fsize /10; i++)
        {
            byte[] k = new byte[R.nextInt(1*ksize - 1) + 1];
                R.nextBytes(k);
            byte[] v = new byte[R.nextInt(1*vsize - 1) + 1];
                R.nextBytes(v);
            byte[] newV = null;
            try
            {
                System.out.print("a-");
                if (store.put(k, v))
                {
                    System.out.print("b-");
                    map.put(k, v);
                    System.out.print("c-");
                    newV = store.get(k);
                    System.out.print("d-");
                    if (Utils.isEquals(v, newV) == false)
                    {
                        System.out.print("e-");
                        System.out.println("|fail0|k=" + Utils.join(k, ",") + "|v=" + Utils.join(v, ",") + "|newv="+newV);
                        log.error("|fail0|k=" + Utils.join(k, ",") + "|v=" + Utils.join(v, ",") + "|newV="+newV);
                        break;
                    }
                } else
                {
                    // no space
                    System.out.println("NO_SPACE");
                    break;
                }
                System.out.print("f-");
                // 随机测试一个
                if(map.size() > 0)
                {
                    List<byte[]> keyList = new ArrayList<byte[]>(map.keySet());
                    byte[] rk = keyList.get(R.nextInt(keyList.size()));
                    System.out.print("g-");
                    map.remove(rk);
                    store.remove(rk);
                    System.out.print("h-");
                }
                
                
                if(map.size() > 0)
                {    
                	List<byte[]> keyList = new ArrayList<byte[]>(map.keySet());
                    byte[] rk = keyList.get(R.nextInt(keyList.size()));
                    System.out.print("i-");
                    newV = store.get(rk);
                    v = map.get(rk);
                    if (Utils.isEquals(v, newV) == false)
                    {
                    	store.get(rk);
                    	BlockItr itr = (BlockItr)store.testPKItr();
                    	log.info("---------PK---------------");
                    	itr.print(log);
                    	
                    	log.info("---------PV---------------");
                    	itr = (BlockItr)store.testPVItr();
                    	itr.print(log);
                        System.out.println("|fail1|k=" + Utils.join(k, ",") + "|v=" + Utils.join(v, ",") + "|newv="+newV);
                        log.error("|fail1|k=" + Utils.join(k, ",") + "|v=" + Utils.join(v, ",") + "|newV="+newV);
                        break;
                    }
                    System.out.print("j-");
                }

//
//                List<byte[]> keyList = new ArrayList<byte[]>();
//                Iterator<byte[]> itr = store.keyIterator();
//                i = 0;
//                while(itr.hasNext())
//                {
//                    System.out.println(i++);
//                    byte[] k1 = itr.next();
////                    newV = store.get(k1);
//                    keyList.add(k1);
//                }
//                for(byte[] k2 : map.keySet())
//                {
//                    boolean find = false;
//                    byte[] k3 = null;
//                    for(int ii=0;ii<keyList.size();ii++)
//                    {
//                        k3 = keyList.get(ii);
//                        if (Utils.isEquals(v, newV) == true)
//                        {
//                            find = true;
//                            break;
//                        }
//                    }
//                    if(find==false)
//                    {
//                        System.out.println("|nofind|k2=" + Utils.join(k2, ",") + "|k3=" + Utils.join(k3, ","));
//                        log.error("|nofind|k2=" + Utils.join(k2, ",") + "|k3=" + Utils.join(k3, ","));
//                    }
//                }
                System.out.println();
            }
            catch (Exception e)
            {
                System.out.println("|fail2|k=" + Utils.join(k, ",") + "|v=" + Utils.join(v, ",") + "|newV="+newV+ "|e=");
                System.out.println(e);
                log.error("|fail2|k=" + Utils.join(k, ",") + "|v=" + Utils.join(v, ",") + "|newV="+newV+ "|e=", e);
                System.err.println(e);
                break;
            }
            System.out.println("i="+i +"|succ|k="+k.length+",v="+v.length+"|"+",k=" + Utils.join(k, ",") + "|v=" + Utils.join(v, ",") + "|succ");
            //log.info("i="+i +"|succ|k="+k.length+",v="+v.length+"|"+",k=" + Utils.join(k, ",") + "|v=" + Utils.join(v, ",") + "|succ");
        }
    }
    
}
